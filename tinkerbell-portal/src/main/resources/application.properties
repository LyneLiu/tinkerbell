# spring boot datasource多数据源配置信息
# http://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/
# http://412887952-qq-com.iteye.com/blog/2302997
# http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-12-12-Spring-Boot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE.html

# 主数据源，默认的
# Spring Boot默认使用的是tomcat连接池技术，依赖tomcat-jdbc
# spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.primary.url=jdbc:mysql://localhost:3306/tinkerbell
spring.datasource.primary.username=root
spring.datasource.primary.password=1qaz2wsx
spring.datasource.primary.driver-class-name=com.mysql.jdbc.Driver

# 更多数据源
spring.datasource.secondary.url=jdbc:mysql://localhost:3306/springdemo
spring.datasource.secondary.username=root
spring.datasource.secondary.password=1qaz2wsx
spring.datasource.secondary.driver-class-name=com.mysql.jdbc.Driver

# Springboot 之 Hibernate自动建表（Mysql） http://www.zslin.com/web/article/detail/15
# 常用的几种配置：
# 1、create――每次加载Hibernate时都会删除上一次生成的表，然后重新生成新表，即使两次没有任何修改也会这样执行，这就导致每次启动都是一个新的数据库，也是导致数据丢失的重要原因；
# 2、create-drop――每次加载Hibernate时都会生成表，但当SessionFactory关闭时，所生成的表将自动删除；
# 3、update――最常用的属性值，第一次加载Hibernate时创建数据表（前提是需要先有数据库），以后加载HIbernate时只会根据model更新，即使model已经删除了某些属性，数据表也不会随之删除字段；
# 4、validate――每次加载Hibernate时都会验证数据表结构，只会和已经存在的数据表进行比较，根据model修改表结构，但不会创建新表。
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

# 下面为连接池的补充设置，应用到上面所有数据源中
spring.datasource.maximum-pool-size=100
spring.datasource.max-idle=10
spring.datasource.max-wait=10000
spring.datasource.min-idle=0
spring.datasource.initial-size=5
spring.datasource.validation-query=SELECT 1
spring.datasource.test-on-borrow=false
spring.datasource.test-while-idle=true
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.time-between-eviction-runs-millis=18800
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
# 合并多个DruidDataSource的监控数据
# spring.datasource.useGlobalDataSourceStat=true

# server port
# server.port=0 使用随机端口
server.port=8088

# 前端模板
# spring.thymeleaf.mode=LEGACYHTML5


# spring security的相关配置
security.basic.enabled=true
# advanced settings ...
security.require-ssl=false
security.enable-csrf=false

security.user.name=root
security.user.password=root

#JPA Configuration:
# spring.jpa.database=MYSQL
# Show or not log for each sql query
# spring.jpa.show-sql=false
# spring.jpa.generate-ddl=true
# Hibernate ddl auto (create, create-drop, update)
# spring.jpa.hibernate.ddl-auto=create
#spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
# spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy
#spring.jpa.database=org.hibernate.dialect.MySQL5InnoDBDialect
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

# hibernate SQL 查询日志
#show sql statement
logging.level.org.hibernate.SQL=debug
#show sql values
logging.level.org.hibernate.type.descriptor.sql=trace


# JWT: JSON Web Token, 包含三个部分header、payload和signature
# <<Header>>
# typ: JWT认证
# alg：签名算法
# <<Payload>>
# iss: 该JWT的签发者
# sub: 该JWT所面向的用户
# aud: 接收该JWT的一方
# exp(expires): 什么时候过期，这里是一个Unix时间戳
# iat(issued at): 在什么时候签发的

spring.application.name=tinkerbell
app.user_cookie = t_user
jwt.header=JWT
# 10 minutes
jwt.expires_in=600
jwt.secret=queenvictoria
jwt.cookie=AUTH-TOKEN